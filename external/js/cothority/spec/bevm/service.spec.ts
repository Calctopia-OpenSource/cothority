import { BEvmService } from "../../src/bevm";
import { ROSTER, startConodes } from "../support/conondes";

// For debugging
// import Log from "../../src/log";

describe("BEvmService", () => {
    const conode = ROSTER.list[0];

    /* tslint:disable:max-line-length */
    const candyBytecode = Buffer.from(`
608060405234801561001057600080fd5b506040516020806101cb833981018060405281019080805190602001909291905050508060008190555080600181905550600060028190555050610172806100596000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a1ff2f5214610051578063ea319f281461007e575b600080fd5b34801561005d57600080fd5b5061007c600480360381019080803590602001909291905050506100a9565b005b34801561008a57600080fd5b5061009361013c565b6040518082815260200191505060405180910390f35b6001548111151515610123576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f6572726f7200000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8060015403600181905550806002540160028190555050565b60006001549050905600a165627a7a723058207721a45f17c0e0f57e255f33575281d17f1a90d3d58b51688230d93c460a19aa0029
`.trim(), "hex");
    const candyAbi = `
[{"constant":false,"inputs":[{"name":"candies","type":"uint256"}],"name":"eatCandy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getRemainingCandies","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_candies","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]
`.trim();
    /* tslint:enable:max-line-length */

    let srv: BEvmService;

    beforeAll(async () => {
        await startConodes();

        srv = new BEvmService(conode);
        srv.setTimeout(1000);
    }, 30 * 1000);

    it("should correctly prepare a contract deployment tx", async () => {
        /* tslint:disable:max-line-length */
        const expectedTx = Buffer.from("7b226e6f6e6365223a22307830222c226761735072696365223a22307831222c22676173223a223078393839363830222c22746f223a6e756c6c2c2276616c7565223a22307830222c22696e707574223ac2276223a22307830222c2272223a22307830222c2273223a22307830222c2268617368223a22307837666631383834633430633664636561653534666361346331356131333063356133663639373032643466336537356665336163373862313735656339356139227d", "hex");
        const expectedHash = Buffer.from("c289e67875d147429d2ffc5cc58e9a1486d581bef5aeca63017ad7855f8dab26", "hex");
        /* tslint:enable:max-line-length */

        const args = [JSON.stringify(String(100))];

        const response = await srv.prepareDeployTx(
            1e7, 1, 0, 0, candyBytecode, candyAbi, args);

        expect(response.transaction).toEqual(expectedTx);
        expect(response.transactionHash).toEqual(expectedHash);
    });

    it("should correctly prepare a contract transaction tx", async () => {
        /* tslint:disable:max-line-length */
        const expectedTx = Buffer.from("7b226e6f6e6365223a22307831222c226761735072696365223a22307831222c22676173223a223078393839363830222c22746f223a22307838636461663063643235393838373235386263313361393263306136646139323639383634346330222c2276616c7565223a22307830222c22696e707574223a223078613166663266353230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303061222c2276223a22307830222c2272223a22307830222c2273223a22307830222c2268617368223a22307865343264343137386465303032323636386433326637383033666564353637376437343666393238666465386430656339303532656432306138616466343362227d", "hex");
        const expectedHash = Buffer.from("e13b1cfe8797fa11bd7929158008033e585d302a6f4cb11cfcf2b0a8bebec3fd", "hex");
        const contractAddress = Buffer.from("8cdaf0cd259887258bc13a92c0a6da92698644c0", "hex");
        /* tslint:enable:max-line-length */

        const nonce = 1;
        const args = [JSON.stringify(String(10))];

        const response = await srv.prepareTransactionTx(
            1e7, 1, 0, contractAddress, nonce, candyAbi, "eatCandy", args);

        expect(response.transaction).toEqual(expectedTx);
        expect(response.transactionHash).toEqual(expectedHash);
    });

    it("should correctly finalize a transaction", async () => {
        /* tslint:disable:max-line-length */
        const transaction = Buffer.from("7b226e6f6e6365223a22307831222c226761735072696365223a22307831222c22676173223a223078393839363830222c22746f223a22307838636461663063643235393838373235386263313361393263306136646139323639383634346330222c2276616c7565223a22307830222c22696e707574223a223078613166663266353230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303061222c2276223a22307830222c2272223a22307830222c2273223a22307830222c2268617368223a22307865343264343137386465303032323636386433326637383033666564353637376437343666393238666465386430656339303532656432306138616466343362227d", "hex");
        const signature = Buffer.from("aa0b243e4ad97b6cb7c2a016567aa02b2e7bed159c221b7089b60688527f6e88679c9dfcb1ceb2477a36753645b564c2a14a7bc757f46b9b714c49a4c93ea0a401", "hex");
        const expectedTx = Buffer.from("7b226e6f6e6365223a22307831222c226761735072696365223a22307831222c22676173223a223078393839363830222c22746f223a22307838636461663063643235393838373235386263313361393263306136646139323639383634346330222c2276616c7565223a22307830222c22696e707574223a223078613166663266353230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303061222c2276223a2230783163222c2272223a22307861613062323433653461643937623663623763326130313635363761613032623265376265643135396332323162373038396236303638383532376636653838222c2273223a22307836373963396466636231636562323437376133363735333634356235363463326131346137626337353766343662396237313463343961346339336561306134222c2268617368223a22307834633966336134343361663030326438373839666235616239393261376631346639396134303762616532613332643464653830313037366365613065353631227d", "hex");
        /* tslint:enable:max-line-length */

        const response = await srv.finalizeTx(transaction, signature);

        expect(response.transaction).toEqual(expectedTx);
    });
});
